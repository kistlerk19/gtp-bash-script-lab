#!/usr/bin/env bash

# iam_setup.sh - Advanced Automate Identity and Access Management in Linux
# Author: Ishmael Gyamfi
# Date: May 3, 2025
# Description: Enhanced script to automate user and group creation with specific settings

# Default Configuration
INPUT_FILE="users.csv"
LOG_FILE="iam_setup.log"
TEMP_PASSWORD="AmalitechGTP@Accra123"
SEND_EMAIL=false

# DO NOT hardcode credentials here - they will be loaded from environment or config
CONFIG_FILE=".iam_config.env"

# Function to load configuration from file
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        # Source the config file if it exists
        source "$CONFIG_FILE"
        log_message "Loaded configuration from $CONFIG_FILE"
    else
        # Use environment variables if they exist
        MAILJET_API_KEY="${MAILJET_API_KEY:-}"
        MAILJET_SECRET_KEY="${MAILJET_SECRET_KEY:-}"
        EMAIL_FROM="${EMAIL_FROM:-iam-system@company.com}"
        EMAIL_FROM_NAME="${EMAIL_FROM_NAME:-IAM System}"
    fi
}

# Display usage information
usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Options:"
    echo "  -f, --file FILE    Specify input CSV file (default: users.txt)"
    echo "  -l, --log FILE     Specify log file (default: iam_setup.log)"
    echo "  -p, --password PWD Set temporary password (default: ChangeMe123)"
    echo "  -e, --email        Send email notifications"
    echo "  -c, --config FILE  Specify config file (default: .iam_config.env)"
    echo "  -h, --help         Display this help message"
    exit 1
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--file)
            INPUT_FILE="$2"
            shift 2
            ;;
        -l|--log)
            LOG_FILE="$2"
            shift 2
            ;;
        -p|--password)
            TEMP_PASSWORD="$2"
            shift 2
            ;;
        -e|--email)
            SEND_EMAIL=true
            shift
            ;;
        -c|--config)
            CONFIG_FILE="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "Unknown option: $1"
            usage
            ;;
    esac
done

# Check if running as root
if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root" >&2
    exit 1
fi

# Function to log messages
log_message() {
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    echo "[$timestamp] $1" | tee -a "$LOG_FILE"
}

# Function to check password complexity
check_password_complexity() {
    local password="$1"
    
    # At least 8 characters
    if [ ${#password} -lt 8 ]; then
        return 1
    fi
    
    # Contains at least one lowercase letter
    if ! echo "$password" | grep -q "[a-z]"; then
        return 1
    fi
    
    # Contains at least one uppercase letter
    if ! echo "$password" | grep -q "[A-Z]"; then
        return 1
    fi
    
    # Contains at least one digit
    if ! echo "$password" | grep -q "[0-9]"; then
        return 1
    fi
    
    # Contains at least one special character
    if ! echo "$password" | grep -q "[!@#$%^&*()_+{}|:<>?]"; then
        return 1
    fi
    
    return 0
}

# Function to send email notification
send_email_notification() {
    local username="$1"
    local fullname="$2"
    local group="$3"
    local email="$4"
    
    if [ "$SEND_EMAIL" = true ]; then
        # Prepare email content for user
        local user_subject="Your New Account: $username"
        local user_body="Hello $fullname,

Your account has been created on the system with the following details:
- Username: $username
- Group: $group
- Temporary Password: $TEMP_PASSWORD

You will be required to change your password on first login.

Regards,
IT Department"

        # Prepare email content for admin
        local admin_subject="New User Account Created: $username"
        local admin_body="Hello Administrator,

A new user account has been created with the following details:
- Username: $username
- Full Name: $fullname
- Group: $group
- Email: $email

This is an automated notification.

Regards,
IAM System"

        # Check if we have API keys
        if [ -z "$MAILJET_API_KEY" ] || [ -z "$MAILJET_SECRET_KEY" ]; then
            log_message "WARNING: Email notification enabled but Mailjet API keys not configured"
            log_message "Using fallback method (mail command) to send email"
            
            # Send email to user using mail command as fallback
            if [ -n "$email" ]; then
                # Add proper email headers with From field
                (
                echo "From: ${EMAIL_FROM_NAME} <${EMAIL_FROM}>"
                echo "To: ${fullname} <${email}>"
                echo "Subject: ${user_subject}"
                echo
                echo "$user_body"
                ) | sendmail -t
                
                log_message "Email notification sent to user $username at $email (sendmail)"
            else
                log_message "WARNING: No email address provided for user $username"
            fi
            
            # Send notification to admin
            (
            echo "From: ${EMAIL_FROM_NAME} <${EMAIL_FROM}>"
            echo "To: System Administrator <${ADMIN_EMAIL}>"
            echo "Subject: ${admin_subject}"
            echo
            echo "$admin_body"
            ) | sendmail -t
            
            log_message "Email notification sent to admin at $ADMIN_EMAIL (sendmail)"
        else
            # Use Mailjet API if configured
            log_message "Sending emails via Mailjet API"
            
            # Send email to user if email is provided
            if [ -n "$email" ]; then
                # Prepare user email JSON
                local user_json='{
                  "Messages":[
                    {
                      "From": {"Email": "'$EMAIL_FROM'", "Name": "'$EMAIL_FROM_NAME'"},
                      "To": [{"Email": "'$email'", "Name": "'$fullname'"}],
                      "Subject": "'$user_subject'",
                      "TextPart": "'"${user_body//\"/\\\"}"'"
                    }
                  ]
                }'
                
                # Send email to user
                curl -s -X POST https://api.mailjet.com/v3.1/send \
                  -u "$MAILJET_API_KEY:$MAILJET_SECRET_KEY" \
                  -H 'Content-Type: application/json' \
                  -d "$user_json"
                  
                log_message "Email notification sent to user $username at $email (Mailjet API)"
            else
                log_message "WARNING: No email address provided for user $username"
            fi
            
            # Prepare admin email JSON
            local admin_json='{
              "Messages":[
                {
                  "From": {"Email": "'$EMAIL_FROM'", "Name": "'$EMAIL_FROM_NAME'"},
                  "To": [{"Email": "'$ADMIN_EMAIL'", "Name": "System Administrator"}],
                  "Subject": "'$admin_subject'",
                  "TextPart": "'"${admin_body//\"/\\\"}"'"
                }
              ]
            }'
            
            # Send email to admin
            curl -s -X POST https://api.mailjet.com/v3.1/send \
              -u "$MAILJET_API_KEY:$MAILJET_SECRET_KEY" \
              -H 'Content-Type: application/json' \
              -d "$admin_json"
              
            log_message "Email notification sent to admin at $ADMIN_EMAIL (Mailjet API)"
        fi
    fi
}

# Initialize log file
echo "# IAM Setup Log - Started on $(date)" > "$LOG_FILE"
log_message "Script started"

# Load configuration
load_config

# Check if input file exists
if [ ! -f "$INPUT_FILE" ]; then
    log_message "ERROR: Input file $INPUT_FILE not found"
    exit 1
fi

# Check if CSV file has proper format
if [[ "$INPUT_FILE" == *.csv ]]; then
    # Check header line (optional)
    header=$(head -n 1 "$INPUT_FILE")
    expected_header="username,fullname,group,email"
    if [[ "$header" != *"username"* || "$header" != *"fullname"* || "$header" != *"group"* ]]; then
        log_message "WARNING: CSV file may not have the expected format. Expected format: $expected_header"
        echo "Note: CSV should have columns for username, fullname, group, and optionally email"
    fi
fi

# Check password complexity
if ! check_password_complexity "$TEMP_PASSWORD"; then
    log_message "ERROR: Temporary password does not meet complexity requirements"
    echo "Password must have at least 8 characters, including uppercase, lowercase, digit, and special character"
    exit 1
fi

# Process each line in the input file
while IFS=, read -r username fullname group email || [[ -n "$username" ]]; do
    # Skip empty lines or comments
    if [[ -z "$username" || "$username" == \#* ]]; then
        continue
    fi

    log_message "Processing user: $username ($fullname) for group: $group"

    # Check if group exists and create if not
    if ! getent group "$group" > /dev/null; then
        groupadd "$group"
        if [ $? -eq 0 ]; then
            log_message "Created group: $group"
        else
            log_message "ERROR: Failed to create group: $group"
            continue
        fi
    else
        log_message "Group $group already exists"
    fi

    # Check if user exists
    if id "$username" &>/dev/null; then
        log_message "User $username already exists"
    else
        # Create user with home directory and assign to group
        useradd -m -c "$fullname" -g "$group" "$username"
        if [ $? -eq 0 ]; then
            log_message "Created user: $username with home directory"
            
            # Set temporary password
            echo "$username:$TEMP_PASSWORD" | chpasswd
            if [ $? -eq 0 ]; then
                log_message "Set temporary password for $username"
                
                # Force password change on first login
                chage -d 0 "$username"
                if [ $? -eq 0 ]; then
                    log_message "Password change required at next login for $username"
                else
                    log_message "ERROR: Failed to set password expiration for $username"
                fi
            else
                log_message "ERROR: Failed to set password for $username"
            fi
            
            # Set permissions on home directory
            chmod 700 "/home/$username"
            if [ $? -eq 0 ]; then
                log_message "Set permissions 700 on /home/$username"
            else
                log_message "ERROR: Failed to set permissions on /home/$username"
            fi
            
            # Send email notification
            send_email_notification "$username" "$fullname" "$group" "$email"
        else
            log_message "ERROR: Failed to create user: $username"
        fi
    fi
done < "$INPUT_FILE"

log_message "Script completed successfully"
echo "IAM setup completed. Check $LOG_FILE for details."
exit 0