#!/usr/bin/env bash

# iam_setup.sh - Advanced Automate Identity and Access Management in Linux
# Author: Ishmael Gyamfi
# Date: May 3, 2025
# Description: Enhanced script to automate user and group creation with specific settings

# Default Configuration
INPUT_FILE="users.csv"
LOG_FILE="iam_setup.log"
TEMP_PASSWORD="AmalitechGTP@Accra123"
SEND_EMAIL=false

# DO NOT hardcode credentials here - they will be loaded from environment or config
CONFIG_FILE=".iam_config.env"
ADMIN_EMAIL="ishmael.gyamfi@verlockt.com"  # Default admin email address

# Function to load configuration from file
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        # Source the config file if it exists
        source "$CONFIG_FILE"
        log_message "Loaded configuration from $CONFIG_FILE"
    else
        # Use environment variables if they exist
        EMAIL_FROM="${EMAIL_FROM:-iam-system@company.com}"
        EMAIL_FROM_NAME="${EMAIL_FROM_NAME:-IAM System}"
        ADMIN_EMAIL="${ADMIN_EMAIL:-admin@company.com}"
        
        # SMTP settings (new)
        SMTP_SERVER="${SMTP_SERVER:-smtp.gmail.com}"
        SMTP_PORT="${SMTP_PORT:-587}"
        SMTP_USER="${SMTP_USER:-}"
        SMTP_PASSWORD="${SMTP_PASSWORD:-}"
        
        log_message "Using environment variables for configuration"
    fi
}

# Display usage information
usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Options:"
    echo "  -f, --file FILE    Specify input CSV file (default: users.txt)"
    echo "  -l, --log FILE     Specify log file (default: iam_setup.log)"
    echo "  -p, --password PWD Set temporary password (default: ChangeMe123)"
    echo "  -e, --email        Send email notifications"
    echo "  -c, --config FILE  Specify config file (default: .iam_config.env)"
    echo "  -h, --help         Display this help message"
    exit 1
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--file)
            INPUT_FILE="$2"
            shift 2
            ;;
        -l|--log)
            LOG_FILE="$2"
            shift 2
            ;;
        -p|--password)
            TEMP_PASSWORD="$2"
            shift 2
            ;;
        -e|--email)
            SEND_EMAIL=true
            shift
            ;;
        -c|--config)
            CONFIG_FILE="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "Unknown option: $1"
            usage
            ;;
    esac
done

# Check if running as root
if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root" >&2
    exit 1
fi

# Function to log messages
log_message() {
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    echo "[$timestamp] $1" | tee -a "$LOG_FILE"
}

# Function to check password complexity
check_password_complexity() {
    local password="$1"
    
    # At least 8 characters
    if [ ${#password} -lt 8 ]; then
        return 1
    fi
    
    # Contains at least one lowercase letter
    if ! echo "$password" | grep -q "[a-z]"; then
        return 1
    fi
    
    # Contains at least one uppercase letter
    if ! echo "$password" | grep -q "[A-Z]"; then
        return 1
    fi
    
    # Contains at least one digit
    if ! echo "$password" | grep -q "[0-9]"; then
        return 1
    fi
    
    # Contains at least one special character
    if ! echo "$password" | grep -q "[!@#$%^&*()_+{}|:<>?]"; then
        return 1
    fi
    
    return 0
}

# Function to check if a command is available
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Create a temporary mail configuration file
create_temp_mail_config() {
    local temp_config=$(mktemp)
    
    # Write mail configuration for authenticated SMTP
    cat > "$temp_config" << EOF
set smtp=$SMTP_SERVER:$SMTP_PORT
set smtp-use-starttls
set ssl-verify=ignore
set smtp-auth=login
set smtp-auth-user=$SMTP_USER
set smtp-auth-password=$SMTP_PASSWORD
set from="$EMAIL_FROM_NAME <$EMAIL_FROM>"
EOF

    echo "$temp_config"
}

# Function to send email using various methods with proper authentication
send_email() {
    local to_address="$1"
    local subject="$2"
    local body="$3"
    local recipient_name="$4"
    local email_sent=false
    
    # Check if SMTP credentials are provided
    if [ -n "$SMTP_USER" ] && [ -n "$SMTP_PASSWORD" ]; then
        log_message "Using authenticated SMTP for sending email"
        
        # Try using s-nail or mailx with authentication (available in newer systems)
        if command_exists s-nail; then
            local temp_config=$(create_temp_mail_config)
            echo "$body" | s-nail -A "$temp_config" -s "$subject" "$to_address"
            local status=$?
            rm -f "$temp_config"
            
            if [ $status -eq 0 ]; then
                log_message "Email sent to $to_address using s-nail and authenticated SMTP"
                email_sent=true
            else
                log_message "ERROR: Failed to send email using s-nail (status: $status)"
            fi
        # Try using mailx with authentication
        elif command_exists mailx; then
            local temp_config=$(create_temp_mail_config)
            echo "$body" | mailx -S smtp="smtp://${SMTP_SERVER}:${SMTP_PORT}" \
                -S smtp-auth=login \
                -S smtp-auth-user="$SMTP_USER" \
                -S smtp-auth-password="$SMTP_PASSWORD" \
                -S from="\"${EMAIL_FROM_NAME}\" <${EMAIL_FROM}>" \
                -s "$subject" "$to_address"
            local status=$?
            rm -f "$temp_config"
            
            if [ $status -eq 0 ]; then
                log_message "Email sent to $to_address using mailx and authenticated SMTP"
                email_sent=true
            else
                log_message "ERROR: Failed to send email using mailx (status: $status)"
            fi
        # Try using msmtp for SMTP authentication
        elif command_exists msmtp; then
            # Create a temporary msmtp config file
            local msmtp_config=$(mktemp)
            cat > "$msmtp_config" << EOF
account default
host $SMTP_SERVER
port $SMTP_PORT
tls on
tls_starttls on
auth on
user $SMTP_USER
password $SMTP_PASSWORD
from $EMAIL_FROM
EOF
            
            echo "$body" | msmtp --file="$msmtp_config" -t << EOF
From: $EMAIL_FROM_NAME <$EMAIL_FROM>
To: $recipient_name <$to_address>
Subject: $subject

EOF
            local status=$?
            rm -f "$msmtp_config"
            
            if [ $status -eq 0 ]; then
                log_message "Email sent to $to_address using msmtp and authenticated SMTP"
                email_sent=true
            else
                log_message "ERROR: Failed to send email using msmtp (status: $status)"
            fi
        fi
    fi
    
    # If still not sent, try sending using the system's mail transport
    if [ "$email_sent" = false ]; then
        log_message "Falling back to system mail transport"
        
        # Create a temporary file for the email content
        local email_file=$(mktemp)
        
        cat > "$email_file" << EOF
From: $EMAIL_FROM_NAME <$EMAIL_FROM>
To: $recipient_name <$to_address>
Subject: $subject
Content-Type: text/plain; charset=UTF-8

$body
EOF
        
        # Use sendmail with the full email content
        if command_exists sendmail; then
            cat "$email_file" | sendmail -t
            local status=$?
            
            if [ $status -eq 0 ]; then
                log_message "Email sent to $to_address using sendmail"
                email_sent=true
            else
                log_message "ERROR: Failed to send email using sendmail (status: $status)"
            fi
        # Try mail command as a last resort
        elif command_exists mail; then
            cat "$email_file" | mail -t
            local status=$?
            
            if [ $status -eq 0 ]; then
                log_message "Email sent to $to_address using mail command"
                email_sent=true
            else
                log_message "ERROR: Failed to send email using mail command (status: $status)"
            fi
        else
            log_message "ERROR: No suitable email sending utility found"
        fi
        
        rm -f "$email_file"
    fi
    
    if [ "$email_sent" = true ]; then
        return 0
    else
        return 1
    fi
}

# Function to send email notification
send_email_notification() {
    local username="$1"
    local fullname="$2"
    local group="$3"
    local email="$4"
    
    if [ "$SEND_EMAIL" = true ]; then
        # Check if email configuration is complete
        if [ -z "$EMAIL_FROM" ]; then
            log_message "ERROR: EMAIL_FROM not configured"
            return 1
        fi
        
        # Prepare email content for user
        local user_subject="Your New Account: $username"
        local user_body="Hello $fullname,

Your account has been created on the system with the following details:
- Username: $username
- Group: $group
- Temporary Password: $TEMP_PASSWORD

You will be required to change your password on first login.

Regards,
IT Department"

        # Prepare email content for admin
        local admin_subject="New User Account Created: $username"
        local admin_body="Hello Administrator,

A new user account has been created with the following details:
- Username: $username
- Full Name: $fullname
- Group: $group
- Email: $email

This is an automated notification.

Regards,
IAM System"

        # Send email to user
        if [ -n "$email" ]; then
            log_message "Attempting to send email notification to user $username at $email"
            if send_email "$email" "$user_subject" "$user_body" "$fullname"; then
                log_message "Email notification sent to user $username at $email"
            else
                log_message "WARNING: Failed to send email to user $username at $email"
            fi
        else
            log_message "NOTE: No email address provided for user $username, skipping email notification"
        fi
        
        # Send email to admin
        if [ -n "$ADMIN_EMAIL" ]; then
            log_message "Attempting to send email notification to admin at $ADMIN_EMAIL"
            if send_email "$ADMIN_EMAIL" "$admin_subject" "$admin_body" "System Administrator"; then
                log_message "Email notification sent to admin at $ADMIN_EMAIL"
            else
                log_message "WARNING: Failed to send email to admin at $ADMIN_EMAIL"
            fi
        else
            log_message "WARNING: No admin email address configured"
        fi
    fi
}

# Initialize log file
echo "# IAM Setup Log - Started on $(date)" > "$LOG_FILE"
log_message "Script started"

# Load configuration
load_config

# Check if input file exists
if [ ! -f "$INPUT_FILE" ]; then
    log_message "ERROR: Input file $INPUT_FILE not found"
    exit 1
fi

# Check if CSV file has proper format
if [[ "$INPUT_FILE" == *.csv ]]; then
    # Check header line (optional)
    header=$(head -n 1 "$INPUT_FILE")
    expected_header="username,fullname,group,email"
    if [[ "$header" != *"username"* || "$header" != *"fullname"* || "$header" != *"group"* ]]; then
        log_message "WARNING: CSV file may not have the expected format. Expected format: $expected_header"
        echo "Note: CSV should have columns for username, fullname, group, and optionally email"
    fi
fi

# Check password complexity
if ! check_password_complexity "$TEMP_PASSWORD"; then
    log_message "ERROR: Temporary password does not meet complexity requirements"
    echo "Password must have at least 8 characters, including uppercase, lowercase, digit, and special character"
    exit 1
fi

# Process each line in the input file
while IFS=, read -r username fullname group email || [[ -n "$username" ]]; do
    # Skip empty lines or comments
    if [[ -z "$username" || "$username" == \#* ]]; then
        continue
    fi

    log_message "Processing user: $username ($fullname) for group: $group"

    # Check if group exists and create if not
    if ! getent group "$group" > /dev/null; then
        groupadd "$group"
        if [ $? -eq 0 ]; then
            log_message "Created group: $group"
        else
            log_message "ERROR: Failed to create group: $group"
            continue
        fi
    else
        log_message "Group $group already exists"
    fi

    # Check if user exists
    if id "$username" &>/dev/null; then
        log_message "User $username already exists"
    else
        # Create user with home directory and assign to group
        useradd -m -c "$fullname" -g "$group" "$username"
        if [ $? -eq 0 ]; then
            log_message "Created user: $username with home directory"
            
            # Set temporary password
            echo "$username:$TEMP_PASSWORD" | chpasswd
            if [ $? -eq 0 ]; then
                log_message "Set temporary password for $username"
                
                # Force password change on first login
                chage -d 0 "$username"
                if [ $? -eq 0 ]; then
                    log_message "Password change required at next login for $username"
                else
                    log_message "ERROR: Failed to set password expiration for $username"
                fi
            else
                log_message "ERROR: Failed to set password for $username"
            fi
            
            # Set permissions on home directory
            chmod 700 "/home/$username"
            if [ $? -eq 0 ]; then
                log_message "Set permissions 700 on /home/$username"
            else
                log_message "ERROR: Failed to set permissions on /home/$username"
            fi
            
            # Send email notification
            send_email_notification "$username" "$fullname" "$group" "$email"
        else
            log_message "ERROR: Failed to create user: $username"
        fi
    fi
done < "$INPUT_FILE"

log_message "Script completed successfully"
echo "IAM setup completed. Check $LOG_FILE for details."
exit 0